{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[{"title":"关于","date":"2022-08-18T04:36:00.000Z","updated":"2022-08-18T08:48:55.673Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"1234567891011121314151617181920212223242526&#123; &#x27;name&#x27;: &#x27;arczhi&#x27; &#x27;age&#x27;: 20, &#x27;gender&#x27;: &#x27;男&#x27;, &#x27;profession&#x27;: &#x27;Student &amp; Coder&#x27;, &#x27;experience&#x27;: &#x27;学习中&#x27;, &#x27;university&#x27;:&#x27;广州大学&#x27;, &#x27;address&#x27;: &#x27;广东省广州市&#x27;, &#x27;education&#x27;: &#x27;本科&#x27;, &#x27;github&#x27;: &#x27;https://github.com/arczhi&#x27;, &#x27;blog&#x27;: &#x27;http://blog.touchcloud.top&#x27;, &#x27;email&#x27;: &#x27;1225366572@qq.com&#x27;, &#x27;description&#x27;: &#x27;努力努力再努力&#x27;, &#x27;skills&#x27;: [ [&#x27;Html&#x27;, &#x27;Javascript&#x27;, &#x27;CSS&#x27;], [&#x27;Vue2&#x27;], [&#x27;Golang&#x27;, &#x27;Gin&#x27;], [&#x27;Python&#x27;, &#x27;Django&#x27;], [&#x27;MySQL&#x27;,&#x27;Redis&#x27;], [&#x27;Docker&#x27;], [&#x27;Photoshop&#x27;] ], &#x27;devTools&#x27;: [&#x27;Visual Studio Code&#x27;, &#x27;Postman&#x27;,&#x27;xftp&#x27;], &#125;"},{"title":"文章分类","date":"2022-08-18T04:13:56.000Z","updated":"2022-08-18T04:17:31.700Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-08-18T04:18:10.000Z","updated":"2022-08-18T04:18:55.623Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"记一条可疑的日志记录_PHP扫描","slug":"PHP扫描","date":"2022-08-18T11:54:44.442Z","updated":"2022-08-18T11:57:42.563Z","comments":true,"path":"2022/08/18/PHP扫描/","link":"","permalink":"http://example.com/2022/08/18/PHP%E6%89%AB%E6%8F%8F/","excerpt":"","text":"某天偶然查看项目日志，发现了一条这样的记录 1time=&quot;2022/08/17 - 18:53:23.230946&quot; level=info msg=&quot;| 404 | 100ns | 88.80.186.144 | GET | /?=PHPE9568F36-D428-11d2-A769-00AA001ACF42 |&quot;","categories":[{"name":"网络安全","slug":"网络安全","permalink":"http://example.com/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"Golang","slug":"Golang","permalink":"http://example.com/tags/Golang/"},{"name":"PHP","slug":"PHP","permalink":"http://example.com/tags/PHP/"}]},{"title":"GoManager任务管理系统","slug":"GoManager任务管理系统开发","date":"2022-08-18T09:51:46.588Z","updated":"2022-08-19T05:01:54.396Z","comments":true,"path":"2022/08/18/GoManager任务管理系统开发/","link":"","permalink":"http://example.com/2022/08/18/GoManager%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91/","excerpt":"","text":"关于项目 一个简易的任务管理系统，适合校园各类部门、社团进行任务发布和管理。 功能实现：1、 实现了各级别用户对个人头像、昵称、邮箱等信息的修改。2、 实现了普通用户、高级用户、管理员的权限区分，普通用户仅允许接收任务，高级用户允许发布任务，管理员允许发布任务和管理用户。3、 实现了高级用户与普通用户之间的任务交互。 4、每位用户都有一块便签区域，可以临时储存一段文本内容。 心路历程 已分享在个人的公众号推送中，欢迎阅读。 996强度的12天里，我经历了什么？ 疑点回顾与分析 1. DB赋值问题 （全局变量初始化时机问题） database包中定义了一个 DB 变量，用来创建gorm的MySQL连接, 类型是*gorm.DB 123456789101112131415161718192021222324252627package databaseimport ( &quot;fmt&quot; &quot;log&quot; &quot;gorm.io/driver/mysql&quot; &quot;gorm.io/gorm&quot;)var ( DB *gorm.DB //注意这里！！！ err error)func InitMySQL() error &#123; //数据库连接字符串 dsn := &quot;xxxxxxxxxxx&quot; //注意这里！！！ DB, err = gorm.Open(mysql.New(mysql.Config&#123; ……………… &#125;), &amp;gorm.Config&#123;&#125;) ………………&#125; 为了使代码更加简洁，在models包中，创建同名变量 DB，并对其赋值database中的DB 123456789101112131415161718192021package models import ( &quot;GoManager/database&quot; &quot;fmt&quot; &quot;time&quot;)var DB = database.DB //注意这里！//UserName查询指定用户func UserNameQuery(username string) (*User, error) &#123; var user User result := DB.Where(&amp;User&#123;UserName: username&#125;).First(&amp;user) //这里！ if result.Error != nil &#123; //fmt.Printf(&quot;%v\\n&quot;, result.Error) return nil, result.Error &#125; return &amp;user, nil&#125; 但是出现了非法内存地址&#x2F;空指针的错误 不使用新的变量，直接使用database包中的DB变量，请求正常，接口正常返回数据 1234567891011121314151617181920package models import ( &quot;GoManager/database&quot; &quot;fmt&quot; &quot;time&quot;)//var DB = database.DB //注意这里！//UserName查询指定用户func UserNameQuery(username string) (*User, error) &#123; var user User result := database.DB.Where(&amp;User&#123;UserName: username&#125;).First(&amp;user) //这里！ if result.Error != nil &#123; //fmt.Printf(&quot;%v\\n&quot;, result.Error) return nil, result.Error &#125; return &amp;user, nil&#125; 参考网上的帖子，楼主的情况和我非常类似， Go使用全局变量要小心闭包 - Go语言中文网 - Golang中文社区 (studygolang.com) 大佬在评论区的评论给了我灵感。 1234567这个问题和闭包没什么关系。var logger = AppLog()这句话使全局变量的初始化，会在main执行之前被执行，此时InitConf显然还没有执行，从而__logger必然是nil，通过AppLog()返回给了logger导致其为nil。之后InitConf虽然把__logger初始化了，但是不会改变logger的值。正确的做法是把InitConf改名成init，变成 package 初始化的一部分。 自我分析： 在models包中新定义的全局变量 DB，已经在main函数执行前初始化，但此时，InitMySQL()函数仍未执行，database.DB为nil，models包中的新定义的全局变量DB也自然为nil。后续database.DB即使初始化完成，models包中的新定义的全局变量DB仍然为nil。 核心问题是全局变量初始化的时机问题。我可以尝试着在main包中的init()函数执行InitMySQL()。 init()函数没怎么了解过，当时学习Golang作者的那本Go语言手册时好像也没提到？（也可能是我没留意） 找篇帖子大致了解了一下，Golang的init函数 - 简书 (jianshu.com) 实现包级别变量的初始化，可以考虑init()函数，该函数先于main()函数执行。 将main包中的InitMySQL()函数放入init()函数，请求正常，接口成功返回数据。 2.Cookie设置问题 cookie必须要在返回JSON响应之前设置好 一开始在返回JSON响应之后才SetCookie，结果在Header里面找了半天都找不到我想设置的cookie，总的来说还是不了解cookie，cookie是http响应头中的一项内容，当然应该伴随响应一起出去。 3.响应返回后及时退出函数问题 返回响应后，要及时退出函数，避免后面设计的变量由于（逻辑）条件不满足，导致出现变量未初始化（nil）问题。","categories":[{"name":"前后端开发","slug":"前后端开发","permalink":"http://example.com/categories/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Golang","slug":"Golang","permalink":"http://example.com/tags/Golang/"},{"name":"Vue2","slug":"Vue2","permalink":"http://example.com/tags/Vue2/"}]},{"title":"Docker 借助docker-compose安装Redis数据库","slug":"Docker安装Redis数据库","date":"2022-08-18T07:31:15.801Z","updated":"2022-08-18T08:03:55.627Z","comments":true,"path":"2022/08/18/Docker安装Redis数据库/","link":"","permalink":"http://example.com/2022/08/18/Docker%E5%AE%89%E8%A3%85Redis%E6%95%B0%E6%8D%AE%E5%BA%93/","excerpt":"","text":"目录结构 在合适的文件夹内创建: 1、一个空文件夹 .&#x2F;data 2、一份yml文件 docker-compose.yml 3、一个文件夹redis.conf 和一个同名的文件 redis.conf 123456.|-- data| `--|-- docker-compose.yml`-- redis.conf `-- redis.conf docker-compose.yml1234567891011121314version: &#x27;3&#x27;services: redis: image: redis:latest container_name: redis restart: always ports: - 3999:6379 volumes: - ./redis.conf:/usr/local/etc/redis/redis.conf:rw - ./data:/data:rw command: /bin/bash -c &quot;redis-server /usr/local/etc/redis/redis.conf/redis.conf&quot; 配置redis.conf文件12345678910111213bind 127.0.0.1 #只绑定本机，如果是在云主机安装redis不建议设置，远程连接会连不上protected-mode noport 6379timeout 0save 900 1 #数据持久化方式RDB的相关配置，分钟级别的保存save 300 10save 60 10000rdbcompression yesdbfilename dump.rdbdir /dataappendonly yes #数据持久化方式AOF，记录用户对数据库的各项命令操作（到文件中）appendfsync everysecrequirepass 你的密码 #添加此项可以为redis配置密码，redis默认无密码 在docker-compose.yml所在目录执行1docker-compose up -d","categories":[{"name":"测试部署","slug":"测试部署","permalink":"http://example.com/categories/%E6%B5%8B%E8%AF%95%E9%83%A8%E7%BD%B2/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://example.com/tags/Docker/"},{"name":"Redis","slug":"Redis","permalink":"http://example.com/tags/Redis/"}]},{"title":"Django框架初体验 & 云笔记CloudNote小程序学习","slug":"Django框架初体验 & 云笔记CloudNote小程序学习","date":"2022-08-18T04:56:00.984Z","updated":"2022-08-18T07:28:27.482Z","comments":true,"path":"2022/08/18/Django框架初体验 & 云笔记CloudNote小程序学习/","link":"","permalink":"http://example.com/2022/08/18/Django%E6%A1%86%E6%9E%B6%E5%88%9D%E4%BD%93%E9%AA%8C%20&%20%E4%BA%91%E7%AC%94%E8%AE%B0CloudNote%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"背景 今年2月份开学之后，就开始有一定的专业发展焦虑感，总觉得课堂上的各种理论知识虽然重要，但自身的专业技能远远未能达到企业的要求。我觉得，我一定要“做出点什么东西来”。 一开始的想法是做一个小程序，功能还没有确定，但遵循“先行动起来”的原则，我花了一周半的时间，通过B站的网课学习了小程序的相关内容（包括小程序静态页面的编写和基础的数据渲染）。在学习的过程中，我意识到，想要完成一个完整的小程序，还需要有人做后端，提供json数据，但对于一个初学者来说，我觉得还要去学习后端，一下子有点无从下手（因为学习小程序的时候我是有html、css、js三剑客基础的，但是大佬们口中一直喊的“后端给出接口”，我没有一点概念）。 怀着一种偷懒的心态，又花了四天的时间，学习了一下小程序的“云开发”。按照我的理解，小程序的云开发，本质上就是云服务厂商直接为你提供文件存储和数据库的服务，将开发者从传统的服务器运维、测试部署等繁琐步骤中解放出来（降低了学习成本并且提高了开发效率）。当然，各个云厂商宣传的时候是宣传得挺好的，但真到自己去使用的时候才发现，一个写好的云函数（仅仅是查询数据库的记录），十次执行中有七次都是失败的，这个可靠程度属实让我捏了一把汗。我一直以为是我自己电脑的开发环境有问题，直到我问了别的朋友，发现原来大家都遇到了云函数执行异常的情况，心里多少有点安慰。 学习进度需要推进下去，那我必须去学习后端的相关知识。都说，后端需要选择一门语言，那我应该选择哪一门呢？C++？不了吧，我平时写作业就是用的它，多少有些厌倦了，而且我总是容易犯C++的语法错误。那，诶，不如python ? (我在22年的年初，刚好花过一点时间学习了python的基础语法) python的语法相对简单一些，现成的代码库比较多，用起来很方便。偶然，又看到了某教育机构在B站发的 Django教程，于是便开始学了起来。 Django框架初体验 通过学习Django,我第一次了解到了 路由、中间件、模板、ORM（对象关系映射）等等的后端开发名词，对当前流行的开发架构有了一个初步的了解。 以下理解基于我实际开发的经验 MVC（Model模型层,View视图层，Controller控制器层）。 Model模型层： 1、创建实体，进行数据库Migrate(混合)后，与数据库中的实体形成映射关系。 2、根据业务逻辑，处理对数据库的增删改查操作。 View视图层：渲染提供给用户界面的数据。 Controller控制器层：与用户进行交互，接收用户的对数据库的操作请求。 当然，Python的这个Django框架有一个特有的MVT架构（Model模型层,View视图层，Template模板层），但本质上和MVC大差不差。Template模板层那里就是Django提供了一些特殊的语法，支持在普通的html文件里面渲染动态的数据。 跟着网课的讲解，我终于在Django框架的加持下，写出了我的第一个小小的http服务器，完成了一个基础的用户登录和注册功能（即使是那样一个在生活中常见得不能再常见的东西，也让我高兴了整整一个下午。第一次感受到，自己写的代码能够“转换”成“看得见”的东西。）当然，要把他实现出来也不容易，除了后端对数据库的逻辑处理，前后端的json数据对接，对于初学者的我来说也是相当吃力的。那时，我还不会用Postman这种工具去测试接口，只能在浏览器中一遍又一遍地试错。 云笔记CloudNote小程序 时间来到5月份，自从接触完Django框架之后，没有具体的项目去巩固我的知识点，我的学习进度又开始阻塞起来。由于当时我不会使用前端框架进行页面开发，加之我个人不是很喜欢使用django框架中的模板去进行数据的渲染，所以网课中的“云笔记项目“我只完成了用户登录和注册部分。灵机一动，我为什么不试试小程序呢？很明显，我更熟悉小程序的语法，在html部分使用 wx-for 指令，不就可以把数据列表渲染上去了吗？ 想法有了，立即动手。在五一假期的五天小长假，我花了四天，”沉浸式“地编码，自己写后端接口，自己设计小程序的界面，在代码开发平台和命令行之间反复横跳，怎么这个数据他就是收不到呢？……好在功夫不负有心人，可算是做出了一点小东西。最终，这个小程序实现了用户登录、注册和用户对笔记的创建、修改、删除操作。 总结 暂且不论脚本语言的运行效率，Python确实是一门很适合初学者快速开发、快速看到成效的语言，（弱类型的语言，减少了很多类型定义的繁琐）。暂时感觉不同语言的开发流程大差不差，存在很多的共通点，我们更应该专注于积累开发相关技能和概念，而不是徒劳地比较哪门语言更好，毕竟术业有专攻，不同的语言适合不同的应用场景。 Django框架是我接触的第一个Web开发框架，算是我的”启蒙老师“，但后来，当我接触了别的框架，回过头来才发现，Django是真的大而全，模板、中间件、数据库连接、数据库缓存、邮箱配置、时区、静态文件储存目录等等，全都给你在配置文件中写得明明白白的。虽然配置Django项目会稍微繁琐一点，但当你跟着配置一遍之后，会对很多概念有一个大致的把握。 写在最后 朋友和我说过这么一句话，”重要的不是你做了这件事情，而是你做这件事情的契机。“，我觉得这句话是真的很有韵味。如果你也突然找到那么一个契机，那便只管放开手去做，成败与否，这段过程中的尝试都会成为你生命里宝贵的财富，很多看似没有意义的付出，往往在不经意之中铺就了未来的道路。","categories":[{"name":"前后端开发","slug":"前后端开发","permalink":"http://example.com/categories/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Django","slug":"Django","permalink":"http://example.com/tags/Django/"},{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"}]},{"title":"CentOS 7 Zabbix5.0安装笔记（踩坑点）","slug":"Zabbix5.0安装笔记+搭配官方下载指南使用","date":"2022-08-18T03:06:12.847Z","updated":"2022-08-18T07:58:09.922Z","comments":true,"path":"2022/08/18/Zabbix5.0安装笔记+搭配官方下载指南使用/","link":"","permalink":"http://example.com/2022/08/18/Zabbix5.0%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0+%E6%90%AD%E9%85%8D%E5%AE%98%E6%96%B9%E4%B8%8B%E8%BD%BD%E6%8C%87%E5%8D%97%E4%BD%BF%E7%94%A8/","excerpt":"","text":"Linux环境： CentOS Linux release 7.9.2009 (Core) Zabbix版本 : 5.0 简介：Zabbix是一套开源的网络管理系统，能够方便地管理各个服务节点。 官网：Zabbix :: The Enterprise-Class Open Source Network Monitoring Solution 从阿里云下载 zabbix5.0 :1rpm -Uvh https://mirrors.aliyun.com/zabbix/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm 更换repo中的yum源,换成阿里云 :1sed -i &#x27;s#http://repo.zabbix.com#https://mirrors.aliyun.com/zabbix#&#x27;/etc/yum.repos.d/zabbix.repo zabbix5.0的环境要求：php要到7以上，否则安装官方指南的一些前端组件会报错！！！ 删除旧版本的php 1yum remove php-common -y 查看可供下载的php包 1yum list *php* 根据清单安装新版本的php 1yum install -y php72w php72w-opcache php72w-xml php72w-mcrypt php72w-gd php72w-devel php72w-mysql php72w-intl php72w-mbstring 改用普通的nginx储存库，而不是redhat的：1yum -y install nginx 【红帽储存库的nginx】里的nginx配置文件（zabbix.conf) 也可以放到【服务器的nginx】里（一会就不用启动rh-nginx116-nginx这个服务） 具体操作如下： 1cp /etc/opt/rh/rh-nginx116/nginx/conf.d/zabbix.conf /etc/nginx/conf.d/ 检测agent是否能连接上：12&gt; zabbix_get -s &#x27;对应的ip&#x27; -p 10050 -k &#x27;agent.ping&#x27;&gt; zabbix_get -s &#x27;对应的ip&#x27; -p 10050 -k &#x27;system.hostname&#x27; 解决图形界面中文乱码：12&gt; yum -y install wqy-microhei-fonts&gt; cp /usr/share/fonts/wqy-microhei/wqy-microhei.ttc /usr/share/fonts/dejavu/DejaVuSans.ttf","categories":[{"name":"测试部署","slug":"测试部署","permalink":"http://example.com/categories/%E6%B5%8B%E8%AF%95%E9%83%A8%E7%BD%B2/"}],"tags":[{"name":"Zabbix","slug":"Zabbix","permalink":"http://example.com/tags/Zabbix/"}]},{"title":"Docker 借助docker-compose安装MySQL数据库","slug":"Docker安装MySQL数据库","date":"2022-08-18T02:18:24.677Z","updated":"2022-08-18T04:34:46.231Z","comments":true,"path":"2022/08/18/Docker安装MySQL数据库/","link":"","permalink":"http://example.com/2022/08/18/Docker%E5%AE%89%E8%A3%85MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/","excerpt":"","text":"docker-compose.yml 配置参考123456789101112131415161718192021version: &#x27;3.1&#x27;services: db: container_name: mysql image: mysql command: --default-authentication-plugin=mysql_native_password ports: - 3030:3306 #端口映射， 暴露在本机的端口：容器内端口 volumes: - ./data:/var/lib/mysql #目录映射， 本机文件目录:docker容器内文件目录 - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro # 时区配置 restart: always #docker重启后，容器自动启动 environment: MYSQL_ROOT_PASSWORD: xxxxxxxxxx #数据库root密码 MYSQL_DATABASE: xxxxxxx #新建的数据库 MYSQL_USER: xx #选择想新建的用户名 MYSQL_PASSWORD: xxxx #为新建用户配置密码 LANG: C.UTF-8 在yml文件所在文件夹下1$ docker-compose up -d my.cnf （var&#x2F;lib&#x2F;mysql) 基础配置123456789101112131415161718192021222324252627282930313233343536373839[mysqld]# 设置3306端口port=3306# 设置mysql的安装目录basedir=/usr/local/mysql# 设置mysql数据库的数据的存放目录datadir=/var/lib/mysql/mysqldb# 允许最大连接数max_connections=1000# 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统max_connect_errors=100# 服务端使用的字符集默认为UTF8character-set-server=utf8mb4# 创建新表时将使用的默认存储引擎default-storage-engine=INNODB# 默认使用“mysql_native_password”插件认证default_authentication_plugin=mysql_native_password#是否对sql语句大小写敏感，1表示不敏感 #！！！慎重，在 MySQL 8.0 版本以上 创建数据库后想要再次修改此项，只能重装数据库！！！lower_case_table_names = 1#MySQL连接闲置超过一定时间后(单位：秒)将会被强行关闭#MySQL默认的wait_timeout 值为8个小时, interactive_timeout参数需要同时配置才能生效interactive_timeout = 1800wait_timeout = 1800#Metadata Lock最大时长（秒）， 一般用于控制 alter操作的最大时长sine mysql5.6#执行 DML操作时除了增加innodb事务锁外还增加Metadata Lock，其他alter（DDL）session将阻塞lock_wait_timeout = 3600#内部内存临时表的最大值。#比如大数据量的group by ,order by时可能用到临时表，#超过了这个值将写入磁盘，系统IO压力增大tmp_table_size = 64Mmax_heap_table_size = 64M[mysql]# 设置mysql客户端默认字符集default-character-set=utf8mb4[client]# 设置mysql客户端连接服务端时默认使用的端口port=3306default-character-set=utf8mb4","categories":[{"name":"测试部署","slug":"测试部署","permalink":"http://example.com/categories/%E6%B5%8B%E8%AF%95%E9%83%A8%E7%BD%B2/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://example.com/tags/Docker/"},{"name":"MySQL","slug":"MySQL","permalink":"http://example.com/tags/MySQL/"}]},{"title":"《网络安全法》 学习笔记","slug":"《网络安全法》学习笔记","date":"2022-08-17T14:36:48.490Z","updated":"2022-08-18T07:30:20.346Z","comments":true,"path":"2022/08/17/《网络安全法》学习笔记/","link":"","permalink":"http://example.com/2022/08/17/%E3%80%8A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"","text":"《中华人民共和国网络安全法 》(samr.gov.cn) 粗读一遍，记录了一些需要重点关注的地方 (以普通学生的视角)。 我感觉IT行业的从业者始终需要有网络安全的意识，知道底线在哪里。 第二十二条 ​ 网络产品、服务应当符合相关国家标准的强制性要求。网络产品、服务的提供者不得设置恶意程序；发现其网络产品、服务存在安全缺陷、漏洞等风险时，应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。 网络产品、服务的提供者应当为其产品、服务持续提供安全维护；在规定或者当事人约定的期限内，不得终止提供安全维护。 网络产品、服务具有收集用户信息功能的，其提供者应当向用户明示并取得同意；涉及用户个人信息的，还应当遵守本法和有关法律、行政法规关于个人信息保护的规定。 第二十七条 ​ 任何个人和组织不得从事非法侵入他人网络、干扰他人网络正常功能、窃取网络数据等危害网络安全的活动；不得提供专门用于从事侵入网络、干扰网络正常功能及防护措施、窃取网络数据等危害网络安全活动的程序、工具；明知他人从事危害网络安全的活动的，不得为其提供技术支持、广告推广、支付结算等帮助。 第六十三条 ​ 违反本法第二十七条规定，从事危害网络安全的活动，或者提供专门用于从事危害网络安全活动的程序、工具，或者为他人从事危害网络安全的活动提供技术支持、广告推广、支付结算等帮助，尚不构成犯罪的，由公安机关没收违法所得，处五日以下拘留，可以并处五万元以上五十万元以下罚款；情节较重的，处五日以上十五日以下拘留，可以并处十万元以上一百万元以下罚款。 单位有前款行为的，由公安机关没收违法所得，处十万元以上一百万元以下罚款，并对直接负责的主管人员和其他直接责任人员依照前款规定处罚。 违反本法第二十七条规定，受到治安管理处罚的人员，五年内不得从事网络安全管理和网络运营关键岗位的工作；受到刑事处罚的人员，终身不得从事网络安全管理和网络运营关键岗位的工作。 第四十一条 网络运营者收集、使用个人信息，应当遵循合法、正当、必要的原则，公开收集、使用规则，明示收集、使用信息的目的、方式和范围，并经被收集者同意。 网络运营者不得收集与其提供的服务无关的个人信息，不得违反法律、行政法规的规定和双方的约定收集、使用个人信息，并应当依照法律、行政法规的规定和与用户的约定，处理其保存的个人信息。 第四十二条 网络运营者不得泄露、篡改、毁损其收集的个人信息；未经被收集者同意，不得向他人提供个人信息。但是，经过处理无法识别特定个人且不能复原的除外。 网络运营者应当采取技术措施和其他必要措施，确保其收集的个人信息安全，防止信息泄露、毁损、丢失。在发生或者可能发生个人信息泄露、毁损、丢失的情况时，应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。 第四十三条 个人发现网络运营者违反法律、行政法规的规定或者双方的约定收集、使用其个人信息的，有权要求网络运营者删除其个人信息；发现网络运营者收集、存储的其个人信息有错误的，有权要求网络运营者予以更正。网络运营者应当采取措施予以删除或者更正。 第四十八条 ​ 任何个人和组织发送的电子信息、提供的应用软件，不得设置恶意程序，不得含有法律、行政法规禁止发布或者传输的信息。 电子信息发送服务提供者和应用软件下载服务提供者，应当履行安全管理义务，知道其用户有前款规定行为的，应当停止提供服务，采取消除等处置措施，保存有关记录，并向有关主管部门报告。 第七十六条 本法下列用语的含义: （一）网络，是指由计算机或者其他信息终端及相关设备组成的按照一定的规则和程序对信息进行收集、存储、传输、交换、处理的系统。 （二）网络安全，是指通过采取必要措施，防范对网络的攻击、侵入、干扰、破坏和非法使用以及意外事故，使网络处于稳定可靠运行的状态，以及保障网络数据的完整性、保密性、可用性的能力。 （三）网络运营者，是指网络的所有者、管理者和网络服务提供者。 （四）网络数据，是指通过网络收集、存储、传输、处理和产生的各种电子数据。 （五）个人信息，是指以电子或者其他方式记录的能够单独或者与其他信息结合识别自然人个人身份的各种信息，包括但不限于自然人的姓名、出生日期、身份证件号码、个人生物识别信息、住址、电话号码等。","categories":[{"name":"网络安全","slug":"网络安全","permalink":"http://example.com/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"}],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2022-08-17T14:35:58.030Z","updated":"2022-08-17T14:35:58.030Z","comments":true,"path":"2022/08/17/hello-world/","link":"","permalink":"http://example.com/2022/08/17/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"网络安全","slug":"网络安全","permalink":"http://example.com/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"},{"name":"前后端开发","slug":"前后端开发","permalink":"http://example.com/categories/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"测试部署","slug":"测试部署","permalink":"http://example.com/categories/%E6%B5%8B%E8%AF%95%E9%83%A8%E7%BD%B2/"}],"tags":[{"name":"Golang","slug":"Golang","permalink":"http://example.com/tags/Golang/"},{"name":"PHP","slug":"PHP","permalink":"http://example.com/tags/PHP/"},{"name":"Vue2","slug":"Vue2","permalink":"http://example.com/tags/Vue2/"},{"name":"Docker","slug":"Docker","permalink":"http://example.com/tags/Docker/"},{"name":"Redis","slug":"Redis","permalink":"http://example.com/tags/Redis/"},{"name":"Django","slug":"Django","permalink":"http://example.com/tags/Django/"},{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"},{"name":"Zabbix","slug":"Zabbix","permalink":"http://example.com/tags/Zabbix/"},{"name":"MySQL","slug":"MySQL","permalink":"http://example.com/tags/MySQL/"}]}